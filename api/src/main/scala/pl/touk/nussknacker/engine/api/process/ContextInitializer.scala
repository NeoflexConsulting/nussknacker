package pl.touk.nussknacker.engine.api.process

import pl.touk.nussknacker.engine.api.context.ProcessCompilationError.NodeId
import pl.touk.nussknacker.engine.api.context.ValidationContext
import pl.touk.nussknacker.engine.api.context.transformation.{BaseDefinedParameter, NodeDependencyValue}
import pl.touk.nussknacker.engine.api.definition.OutputVariableNameDependency
import pl.touk.nussknacker.engine.api.typed.typing.TypingResult

/**
  * ContextInitializer provides implementation of transformation from raw event generated by source to Context.
  *
  * @tparam Raw - type of raw event that is generated by source (KafkaDeserializationSchema for kafka) in source function.
  */
trait ContextInitializer[Raw] extends Serializable {

  type InitContextImplT

  /**
    * Initializes `Context` with raw event value.
    *
    * @param processId - id of the process or flink job, used to setup name of created Context
    * @param nodeId  - name of the task within the process or flink job, used to setup name of created Context
    */
  def initContext(processId: String, nodeId: String): InitContextImplT

}

/**
  * Context initializer for sources based on [[pl.touk.nussknacker.engine.api.context.transformation.GenericNodeTransformation]].
  *
  * @tparam Raw - type of raw event that is generated by source (KafkaDeserializationSchema for kafka) in source function.
  * @tparam DefinedParameter - type of parameters used in the node, see [[pl.touk.nussknacker.engine.api.context.transformation.GenericNodeTransformation]].
  */
trait GenericContextInitializer[Raw, DefinedParameter <: BaseDefinedParameter] { self: ContextInitializer[Raw] =>

  /**
    * Enhances validation context with definition of all variables produced by the source.
    *
    * @param context      - `ValidationContext` initialized with global variables, definition of variables available in `Context` scope and their types
    * @param dependencies - node dependencies
    * @param parameters   - parameters associated with final contextTransformation
    * @return - validation context with initialized "input" variable.
    */
  def validationContext(context: ValidationContext, dependencies: List[NodeDependencyValue], parameters: List[(String, DefinedParameter)])(implicit nodeId: NodeId): ValidationContext

}

/**
  * Basic implementation of context initializer for sources based on [[pl.touk.nussknacker.engine.api.context.transformation.GenericNodeTransformation]].
  * Requires proper definition of outputVariableType.
  *
  * @tparam Raw - raw event that is generated by source (KafkaDeserializationSchema for kafka) in source function.
  * @tparam DefinedParameter - type of parameters used in the node, see [[pl.touk.nussknacker.engine.api.context.transformation.GenericNodeTransformation]].
  */
abstract class BasicGenericContextInitializer[Raw, DefinedParameter <: BaseDefinedParameter] extends ContextInitializer[Raw] with GenericContextInitializer[Raw, DefinedParameter] {

  /**
    * Enhances validation context with definition of all variables produced by the source.
    * Within basic scenario only "input" variable is initialized.
    *
    * @param context      - `ValidationContext` initialized with global variables, definition of variables available in `Context` scope and their types
    * @param dependencies - node dependencies
    * @param parameters   - parameters associated with final contextTransformation
    * @return - validation context with initialized "input" variable.
    */
  override def validationContext(context: ValidationContext, dependencies: List[NodeDependencyValue], parameters: List[(String, DefinedParameter)])(implicit nodeId: NodeId): ValidationContext = {
    val outputVariableName = OutputVariableNameDependency.extract(dependencies)
    context.withVariable(outputVariableName, outputVariableType(context, dependencies, parameters), None).getOrElse(context)
  }

  /**
    * Within basic scenario it provides the information about the type of "input" variable.
    *
    * @return type of "input" variable.
    */
  protected def outputVariableType(context: ValidationContext, dependencies: List[NodeDependencyValue], parameters: List[(String, DefinedParameter)])(implicit nodeId: NodeId): TypingResult
}