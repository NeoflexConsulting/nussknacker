package pl.touk.nussknacker.engine.api.process

import cats.data.ValidatedNel
import pl.touk.nussknacker.engine.api.context.ProcessCompilationError.NodeId
import pl.touk.nussknacker.engine.api.context.{ProcessCompilationError, ValidationContext}
import pl.touk.nussknacker.engine.api.runtimecontext.{ContextIdGenerator, EngineRuntimeContext}
import pl.touk.nussknacker.engine.api.typed.typing.TypingResult
import pl.touk.nussknacker.engine.api.{Context, Lifecycle, VariableConstants}

/**
  * ContextInitializer provides implementation of transformation from raw event generated by source to Context.
  *
  * @tparam Raw - type of raw event that is generated by source (KafkaDeserializationSchema for kafka) in source function.
  */
trait ContextInitializer[Raw] extends Serializable {

  /**
    * Initializes `Context` with raw event value.
    *
    * @param nodeId  - name of node, used to setup name of created Context
    */
  def initContext(nodeId: String): ContextInitializingFunction[Raw]

  /**
    * Enhances validation context with definition of all variables produced by the source.
    *
    * @param context      - `ValidationContext` initialized with global variables, definition of variables available in `Context` scope and their types
    * @return - validation context with initialized "input" variable.
    */
  def validationContext(context: ValidationContext)(implicit nodeId: NodeId): ValidatedNel[ProcessCompilationError, ValidationContext]

}

trait ContextInitializingFunction[Raw] extends (Raw => Context) with Lifecycle with Serializable

/**
  * Basic implementation of context initializer. Used when raw event produced by source does not need further transformations and
  * should be assigned to default "input" variable directly.
  *
  * @tparam Raw - type of raw event that is generated by source (KafkaDeserializationSchema for kafka) in source function.
  */
class BasicContextInitializer[Raw](protected val outputVariableType: TypingResult, protected val outputVariableName: String = VariableConstants.InputVariableName) extends ContextInitializer[Raw] {

  override def initContext(nodeId: String): ContextInitializingFunction[Raw] =
    BasicContextInitializingFunction(nodeId, outputVariableName)

  override def validationContext(context: ValidationContext)(implicit nodeId: NodeId): ValidatedNel[ProcessCompilationError, ValidationContext] = {
    context.withVariable(outputVariableName, outputVariableType, None)
  }

}

/**
  * Initialize context of variables based on "input" variable represents the event.
  *
  * @param nodeId  - name of node, used to setup name of created Context
  * @param outputVariableName - name of output variable
  * @tparam Raw - type of raw event that is generated by source (KafkaDeserializationSchema for kafka) in source function.
  */
case class BasicContextInitializingFunction[Raw](nodeId: String, outputVariableName: String) extends ContextInitializingFunction[Raw] {

  private var contextIdGenerator: ContextIdGenerator = _

  override def open(context: EngineRuntimeContext): Unit = {
    contextIdGenerator = context.contextIdGenerator(nodeId)
  }

  override def apply(input: Raw): Context =
    newContext.withVariable(outputVariableName, input)

  protected def newContext: Context =
    Context(contextIdGenerator.nextContextId())

}