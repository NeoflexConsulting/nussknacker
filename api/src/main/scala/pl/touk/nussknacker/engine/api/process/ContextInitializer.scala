package pl.touk.nussknacker.engine.api.process

import pl.touk.nussknacker.engine.api.context.ProcessCompilationError.NodeId
import pl.touk.nussknacker.engine.api.context.ValidationContext
import pl.touk.nussknacker.engine.api.typed.typing.TypingResult
import pl.touk.nussknacker.engine.api.{Context, VariableConstants}

/**
  * ContextInitializer provides implementation of transformation from raw event generated by source to Context.
  *
  * @tparam Raw - type of raw event that is generated by source (KafkaDeserializationSchema for kafka) in source function.
  */
trait ContextInitializer[Raw] extends Serializable {

  /**
    * Initializes `Context` with raw event value.
    *
    * @param processId - id of the process, used to setup name of created Context
    * @param nodeId  - name of node, used to setup name of created Context
    */
  def initContext(processId: String, nodeId: String): Raw => Context

  /**
    * Enhances validation context with definition of all variables produced by the source.
    *
    * @param context      - `ValidationContext` initialized with global variables, definition of variables available in `Context` scope and their types
    * @return - validation context with initialized "input" variable.
    */
  def validationContext(context: ValidationContext)(implicit nodeId: NodeId): ValidationContext

}

/**
  * Basic implementation of context initializer. Used when raw event produced by source does not need further transformations and
  * should be assigned to default "input" variable directly.
  *
  * @tparam Raw - type of raw event that is generated by source (KafkaDeserializationSchema for kafka) in source function.
  */
class BasicContextInitializer[Raw](outputVariableType: TypingResult, outputVariableName: String = VariableConstants.InputMetaVariableName) extends ContextInitializer[Raw] {

  // processId, nodeId is needed?
  override def initContext(processId: String, nodeId: String): Raw => Context =
    input =>
      newContext(processId, nodeId).withVariable(outputVariableName, input)

  protected def newContext(processId: String, nodeId: String): Context = {
    Context.withPrefixedInitialId(s"$processId-$nodeId")
  }

  override def validationContext(context: ValidationContext)(implicit nodeId: NodeId): ValidationContext = {
    context.withVariable(outputVariableName, outputVariableType, None).getOrElse(context)
  }

}